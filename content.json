[{"title":"《软技能-代码之外的生存指南》读书笔记","date":"2017-03-03T05:10:23.000Z","path":"2017/03/03/《软技能-代码之外的生存指南》读书笔记/","text":"规划未来 设定至少一个大目标 将大目标分解成若干小目标 月度目标 周目标 每日目标 及时调整方向 定期反省总结所得所失","tags":[{"name":"人生","slug":"人生","permalink":"http://yoursite.com/tags/人生/"},{"name":"理财","slug":"理财","permalink":"http://yoursite.com/tags/理财/"},{"name":"程序员","slug":"程序员","permalink":"http://yoursite.com/tags/程序员/"},{"name":"职业生涯","slug":"职业生涯","permalink":"http://yoursite.com/tags/职业生涯/"}]},{"title":"《程序是怎样跑起来的》读书笔记","date":"2017-03-02T03:42:15.000Z","path":"2017/03/02/《程序是怎样跑起来的》读书笔记/","text":"CPU 寄存器 累加寄存器 标志寄存器 程序计数器 基址寄存器 变址寄存器 通用寄存器 指令寄存器 栈寄存器 控制器 运算器 时钟 程序员了解CPU的重点 CPU是寄存器的集合体 寄存器：程序是把寄存器作为对象来描述的 汇编：汇编语言–&gt;机器语言 反汇编：机器语言–&gt;汇编语言 机器语言指令的主要类型 数据传送指令 寄存器和内存、内存和内存、寄存器和外围设备之间的数据读写操作 运算指令 用累加寄存器执行算术运算、逻辑运算、比较运算和移位运算 跳转指令 实现条件分支、循环、强制跳转等 call/return 指令 函数的调用/返回调用前的地址 机器浮点数表示方式 十进制 0.75 单精度浮点数 0-01111110-10000000000000000000000 符号位 1/0 表示正负 指数 EXCESS系统表现 表示正负 01111110-01111111=-1 基数 2 2^-1 尾数 小数点前面的第一位是1，因此是 1.10000000000000000000000 = 1.5 1011.0011 -&gt;逻辑右移 0001.0110011-&gt;保证小数部分23位0001.01100110000000000000000-&gt;仅保留小数部分01100110000000000000000 结果 1.5*2^-1=0.75 123456789101112131415161718192021222324252627282930#include &lt;stdio.h&gt;#include &lt;string.h&gt;int main() &#123; float data; unsigned long buff; int i; char s[34+1]; data = (float)0.75; memcpy(&amp;buff, &amp;data, 4); for(i=33; i&gt;=0; i--) &#123; if(i == 1 || i == 10) s[i] = '-'; else &#123; if(buff % 2 == 1) s[i]='1'; else s[i]='0'; buff /= 2; &#125; &#125; s[34]='\\0'; printf(\"%s\\n\", s); return 0;&#125;","tags":[{"name":"程序","slug":"程序","permalink":"http://yoursite.com/tags/程序/"}]},{"title":"《计算机是怎样跑起来的》读书笔记","date":"2017-02-17T02:24:22.000Z","path":"2017/02/17/《计算机是怎样跑起来的》读书笔记/","text":"计算机的三个根本性基础 计算机是执行输入、运算、输出的设备 程序是指令和数据的集合 计算机的处理方式有时与人们的思维习惯不同 计算机硬件三个基本要素 CPU 内存 I/O 流程图 顺序执行 条件分支 循环 主要的典型算法 辗转相除法 求解最大公约数 123456789101112131415#include &lt;stdio.h&gt;int main(void)&#123; int a=123456789, b=987654321; while (a != b) &#123; if ( a&gt;b ) a=a-b; else b=b-a; &#125; printf(\"max common divisor is [%d]\\n\", a);&#125; 埃拉拖斯特尼筛法 判定素数 检索数据 二分查找 哈希查找 数据排序 冒泡排序 12345678910111213141516171819202122#include &lt;stdio.h&gt;int main(void)&#123; int i, j, tmp; int x[10] = &#123;1,3,4,5,2,1,6,12,11,23&#125;; for(i=9; i&gt;0; i--) &#123; for(j=0; j&lt;i; j++) &#123; if(x[i] &gt; x[j]) &#123; tmp = x[i]; x[i] = x[j]; x[j] = tmp; &#125; &#125; &#125; for(i=0; i&lt;10; i++) printf(\"x[%d]=%d\\n\", i, x[i]); return 0;&#125; 快速排序 主要的典型数据结构 栈 12345678910111213141516171819202122232425262728293031323334353637#include &lt;stdio.h&gt;void Push(char Data);char Pop(void);char Stack[100];int StackPointer = 0;int main(void)&#123; int i=0; char init[10]=\"fortest\"; while(init[i] != '\\0') &#123; Push(init[i]); i++; &#125; for(i=StackPointer-1; i&gt;=0; i--) printf(\"Stack[%d]=[%c]\\n\", i, Stack[i]); for(i=StackPointer-1; i&gt;=0; i--) printf(\"[%d]: [%c]\\n\", i, Pop()); return 0;&#125;void Push(char Data)&#123; Stack[StackPointer] = Data; StackPointer++;&#125;char Pop(void)&#123; StackPointer--; return Stack[StackPointer];&#125; 队列 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include &lt;stdio.h&gt;void Set(char Data);char Get(void);char Queue[100];int SetIndex=0;int GetIndex=0;int main(void)&#123; int i=0; char init[10]=\"fortest\"; while(init[i] != '\\0') &#123; Set(init[i]); i++; &#125; for(i=SetIndex-1; i&gt;=0; i--) printf(\"Queue[%d]=%c\\n\", i, Queue[i]); for(i=GetIndex; i&lt;SetIndex; i++) printf(\"GetQueue=[%c]\\n\", Get()); return 0;&#125;void Set(char Data)&#123; if(SetIndex &gt; 99) SetIndex = 0; Queue[SetIndex] = Data; SetIndex++;&#125;char Get(void)&#123; char Data; Data = Queue[GetIndex]; GetIndex++; if(GetIndex &gt; 99) GetIndex=0; return Data;&#125; 链表 二叉树 面向对象编程语言三个基本特性 继承 封装 多态 数据库的构成 数据文件 DBMS 应用程序 瀑布模型 开始 需求分析 外部设计 内部设计 程序设计 编码实现 测试 部署、维护 目标 系统工程师 技术能力 沟通能力 客户期待的是由计算机带来的IT解决方案，而并非计算机技术","tags":[{"name":"计算机","slug":"计算机","permalink":"http://yoursite.com/tags/计算机/"}]},{"title":"《Github》从入门到实践》读书笔记","date":"2017-02-10T02:20:02.000Z","path":"2017/02/10/《Github》从入门到实践》读书笔记/","text":"git commandinit123456789101112git config --global core.editor vim #set editormkdir project_namecd project_namegit inittouch README.mdvi README.mdgit statusgit add README.mdgit diff HEADgit commit -m &quot;first commit&quot;git loggit log --pretty=short #show first line show current branch1git branch create and switch to new branch1git checkout -b feature-A merge branch123git checkout mastergit merge --no-ff feature-Agit log --graph rollback1git reset --hard c1647602aff644f8d535b8790db03fd839c9107a #commit hash merge multiple branches12345678git checkout -b fix-Bvi README.mdgit add README.mdgit commit -m &quot;fix-B&quot;git refloggit checkout mastergit reset --hard 31c75f7git merge --no-ff fix-B modify last commit message1git commit --amend merge commit message1git rebase -i HEAD~2 add remote 仓库123git remote add origin git@github.com:poplarch/git-tutorial.gitgit pull origin master --allow-unrelated-historiesgit push -u origin master use hub from Github123brew install hubalias git=hub #add to .zshrcgit version Git Flow123456789101112131415161718192021222324252627282930313233brew install git-flowcd ~/src/git/git clone hirocaster/blogcd bloggit flow init -d #default settingsgit branch -a #show all branchesgit push -u origin developgit pullgit flow feature start add-user #switch to new branch feature/add-usergit branchgit push origin feature/add-user#request PR#PR acceptedgit checkout developgit pull#visit github.com-settings-set default PR branch to develop#prepare to releasegit flow release start &apos;1.0.0&apos;git flow release finish &apos;1.0.0&apos;git taggit push origin developgit checkout mastergit push origin mastergit push --tags#hot-fixgit fetch origingit flow hotfix start &apos;1.0.1&apos; &apos;1.0.0&apos;git push origin hotfix/1.0.1#request PR#merge to mastergit fetch origin#保证hotfix分支只对master分支的内容进行最小限度的修改#hotfix对develop分支发起PR之后，可以删除","tags":[{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"},{"name":"github","slug":"github","permalink":"http://yoursite.com/tags/github/"},{"name":"版本管理","slug":"版本管理","permalink":"http://yoursite.com/tags/版本管理/"},{"name":"Git Flow","slug":"Git-Flow","permalink":"http://yoursite.com/tags/Git-Flow/"}]}]